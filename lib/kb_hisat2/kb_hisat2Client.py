# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class kb_hisat2(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://kbase.us/services/authorization/Sessions/Login'):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = None
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc)

    def run_hisat2(self, params, context=None):
        """
        :param params: instance of type "Hisat2Params" (Input for hisat2.
           ws_name = the workspace name provided by the narrative for storing
           output. sampleset_ref = the workspace reference for either the
           reads library or set of reads libraries to align. accepted types:
           KBaseSets.ReadsSet, KBaseRNASeq.RNASeqSampleSet,
           KBaseAssembly.SingleEndLibrary, KBaseAssembly.PairedEndLibrary,
           KBaseFile.SingleEndLibrary, KBaseFile.PairedEndLibrary genome_ref
           = the workspace reference for the reference genome that HISAT2
           will align against. num_threads = the number of threads to tell
           hisat to use (default 2) quality_score = one of phred33 or phred64
           skip = number of initial reads to skip (default 0) trim3 = number
           of bases to trim off of the 3' end of each read (default 0) trim5
           = number of bases to trim off of the 5' end of each read (default
           0) np = penalty for positions wither the read and/or the reference
           are an ambiguous character (default 1) minins = minimum fragment
           length for valid paired-end alignments. only used if
           no_spliced_alignment is true maxins = maximum fragment length for
           valid paired-end alignments. only used if no_spliced_alignment is
           true orientation = orientation of each member of paired-end reads.
           valid values = "fr, rf, ff" min_intron_length = sets minimum
           intron length (default 20) max_intron_length = sets maximum intron
           length (default 500,000) no_spliced_alignment = disable spliced
           alignment tailor_alignments = report alignments tailored for
           either cufflinks or stringtie condition = a string stating the
           experimental condition of the reads. REQUIRED for single reads,
           ignored for sets. build_report = 1 if we build a report, 0
           otherwise. (default 1) (shouldn't be user set - mainly used for
           subtasks) output naming: alignment_suffix is appended to the name
           of each individual reads object name (just the one if it's a
           simple input of a single reads library, but to each if it's a set)
           alignmentset_suffix is appended to the name of the reads set, if a
           set is passed.) -> structure: parameter "ws_name" of String,
           parameter "alignment_suffix" of String, parameter
           "alignmentset_suffix" of String, parameter "sampleset_ref" of
           String, parameter "condition" of String, parameter "genome_ref" of
           String, parameter "num_threads" of Long, parameter "quality_score"
           of String, parameter "skip" of Long, parameter "trim3" of Long,
           parameter "trim5" of Long, parameter "np" of Long, parameter
           "minins" of Long, parameter "maxins" of Long, parameter
           "orientation" of String, parameter "min_intron_length" of Long,
           parameter "max_intron_length" of Long, parameter
           "no_spliced_alignment" of type "bool" (indicates true or false
           values, false <= 0, true >=1), parameter "tailor_alignments" of
           String, parameter "build_report" of type "bool" (indicates true or
           false values, false <= 0, true >=1)
        :returns: instance of type "Hisat2Output" (Output for hisat2.
           alignmentset_ref if an alignment set is created alignment_objs for
           each individual alignment created. The keys are the references to
           the reads object being aligned.) -> structure: parameter
           "report_name" of String, parameter "report_ref" of String,
           parameter "alignmentset_ref" of String, parameter "alignment_objs"
           of mapping from String to type "AlignmentObj" (Created alignment
           object returned. alignment_ref = the workspace reference of the
           new alignment object name = the name of the new object, for
           convenience.) -> structure: parameter "alignment_ref" of String,
           parameter "name" of String
        """
        return self._client.call_method(
            'kb_hisat2.run_hisat2',
            [params], self._service_ver, context)

    def status(self, context=None):
        return self._client.call_method('kb_hisat2.status',
                                        [], self._service_ver, context)
