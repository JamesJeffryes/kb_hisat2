# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class kb_hisat2(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://kbase.us/services/authorization/Sessions/Login'):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = None
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc)

    def run_hisat2(self, params, context=None):
        """
        :param params: instance of type "Hisat2Params" (Input for hisat2.
           ws_name = the workspace name provided by the narrative for storing
           output. sampleset_ref = the workspace reference for the sampleset
           of reads to align. genome_ref = the workspace reference for the
           reference genome that HISAT2 will align against. alignmentset_name
           = the name of the alignment set object to create. num_threads =
           the number of threads to tell hisat to use (NOT USER SET?)
           quality_score = one of phred33 or phred64 skip = trim3 = trim5 =
           np = minins = maxins = orientation = min_intron_length =
           max_intron_length = no_spliced_alignment =
           transcriptome_mapping_only = tailor_alignments = condition = a
           string stating the experimental condition of the reads. REQUIRED
           for single reads, ignored for sets.) -> structure: parameter
           "ws_name" of String, parameter "alignmentset_name" of String,
           parameter "sampleset_ref" of String, parameter "condition" of
           String, parameter "genome_ref" of String, parameter "num_threads"
           of Long, parameter "quality_score" of String, parameter "skip" of
           Long, parameter "trim3" of Long, parameter "trim5" of Long,
           parameter "np" of Long, parameter "minins" of Long, parameter
           "maxins" of Long, parameter "orientation" of String, parameter
           "min_intron_length" of Long, parameter "max_intron_length" of
           Long, parameter "no_spliced_alignment" of type "bool" (indicates
           true or false values, false <= 0, true >=1), parameter
           "transcriptome_mapping_only" of type "bool" (indicates true or
           false values, false <= 0, true >=1), parameter "tailor_alignments"
           of String
        :returns: instance of type "ResultsToReport" (Object for Report type)
           -> structure: parameter "report_name" of String, parameter
           "report_ref" of String
        """
        return self._client.call_method(
            'kb_hisat2.run_hisat2',
            [params], self._service_ver, context)

    def status(self, context=None):
        return self._client.call_method('kb_hisat2.status',
                                        [], self._service_ver, context)
